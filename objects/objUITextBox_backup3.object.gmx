<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objUI</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// LOCAL VARIABLES

///////////////////////////////////////////////////////
//  INHERITED
////
double_click = true;

///////////////////////////////////////////////////////
//  DRAWING
////
srf_text = surface_create( width, height );


///////////////////////////////////////////////////////
//  CURSOR
////
cursor_pos = 0;
prev_cursor_pos = cursor_pos;

cursor_blink = 0;


cursor_select_start = 0;
cursor_select_end   = 0;


///////////////////////////////////////////////////////
//  DATA
////

text = ""; // the actual typed text
prev_text = text; // the text as it was in the previous frame
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(objUIManager.selected_item == id)
{
    update_user_input(cursor_pos);
    text = user_input;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LEFT CLICKED
calculate_cursor_loc( mouse_x, mouse_y, id );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ACTIVATED
keyboard_string = "";
user_input = text;//string_collapse(text, chr(10));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw

///////////////////////////////////////////////////////////
//  DEBUG
////
    draw_text(10,10,"FPS: "+string(fps));
    
    //draw border
    draw_rectangle_colour( x, y, x+width, y+height, c_black, c_black, c_black, c_black, true);


///////////////////////////////////////////////////////////
//  UPDATE
////
    // Whether or not srf_text needs to be redrawn
    var redraw = ( !surface_exists( srf_text ) ||
                   width  != prev_width ||
                   height != prev_height );
    
    
    if( (objUIManager.selected_item == id) || new || redraw)
    {
        
        // make sure it draws at least once
        new = false;
        
        ///////////////////////////////////////////////////////////
        //  REDRAW
        ////
            if( redraw )
            {
                prev_width  = width;
                prev_height = height;
                
                surface_free( srf_text );
                srf_text = surface_create( width, height );
            }
        
        
        ///////////////////////////////////////////////////////////
        //  TEXT
        ////
            if( text != prev_text || redraw)
            {
                cursor_pos += ((string_length_full(text) - string_length_full(prev_text)) * !keyboard_check(vk_delete));
                prev_text = text;
                
                surface_set_target( srf_text );
                    draw_clear_alpha( c_black, 0 );
                    draw_text( 0, 0, text );
                surface_reset_target();
            }
         
           
        ///////////////////////////////////////////////////////////
        //  CURSOR
        ////
            //////////////
            //  SETUP
            ////
                // separate text into lines
                var lines = string_tokenize( display_text, chr(10), false );
                var num_lines = (ds_list_size(lines) - 1);
                
                //calculate_cursor(id);
                    
                // calculate the line the cursor is currently on
                var line = string_count( chr(10), string_copy( display_text, 1, cursor_pos ) );
                var tline = string_count( chr(10), string_copy( text, 1, cursor_pos) );
                
                // calculate the position of the cursor in the current line
                var cp_line = cursor_pos;
                for(var i = 0; i &lt; line; i++)
                    cp_line -= string_length(lines[|i]) + 1;
                
                // make sure the cursor is on the right line...
                var line_length = string_length(lines[|line]) + line;
                if(cp_line &gt; line_length)
                {
                    line = min( (line + 1), num_lines );;
                    cp_line -= line_length;
                }
                
                
            //////////////
            //  KEYBOARD
            ////
                // Left
                if(keyboard_check_pressed(vk_left))
                    --cursor[POS];// = max(0, cursor_pos - 1);
                    
                // Right
                if(keyboard_check_pressed(vk_right))
                    ++cursor[POS];// = min( string_length(display_text) + tline, (cursor_pos + 1) );
                    
                // Up
                if(keyboard_check_pressed(vk_up))
                {
                    if(cursor[LINE] &gt; 0)
                    {
                        --cursor[LINE];
                        cursor[POS] = min( cursor[POS], string_length(lines[|cursor[LINE]]) );
                    }
                    //{
                        // the length of the line above
                    //   var prev_len = string_length(lines[|line-1]);
                        
                        // move the cursor to the beginning of the line above and shift it to the correct position
                    //    cursor_pos -= (((cp_line + 1) + prev_len) - min( prev_len, cp_line ));
                    //}
                }
                
                // Down
                if(keyboard_check_pressed(vk_down))
                {
                    if(cursor[LINE] &lt; ds_list_size(lines) - 1)
                    {
                        ++cursor[LINE];
                        cursor[POS] = min( cursor[POS], string_length(lines[|cursor[LINE]]) );
                    }
                    //{
                    //    var cur_len  = string_length(lines[|line]),   // the length of the current line
                    //        next_len = string_length(lines[|line+1]); // the length of the line below
                            
                        // move the cursor to the beginning of the line below and shift to the correct position
                    //    cursor_pos += ((cur_len - cp_line) + min( next_len, cp_line )) + 1;
                    //}
                }
                
                // Enter
                if(keyboard_check_pressed(vk_enter))
                {
                    //cursor[POS]++;
                    //cursor[LINE]++;
                    //cursor[POS] -= 2;
                    //cursor[LINE]++;
                    //cursor[POS] = 0;
                }
                
                // Home
                if(keyboard_check_pressed(vk_home))
                {
                    //cursor_pos -= (cp_line - 1);
                    cursor[POS] = 0;
                }
                
                // end
                if(keyboard_check_pressed(vk_end))
                {
                    //cursor_pos += (string_length(lines[|line]) - cp_line);
                    cursor[POS] = string_length(lines[|cursor[LINE]]);
                }
                
            //////////////
            //  UPDATE CURSOR
            ////
                if((cursor[LINE] != prev_cursor[LINE]) || (cursor[POS] != prev_cursor[POS]))
                {
                    // reset cursor visibility
                    cursor_blink = 0;
                    
                    
                    //////////////
                    //  RECALCULATE
                    ////
                        show_debug_message("recalculating: " + string(cursor[LINE]) + " " + string(cursor[POS]) + " " + string(cursor[LOC]));    
                    
                        calculate_cursor(id);
                        // the line the cursor is currently on
                        //line = string_count( chr(10), string_copy( display_text, 1, cursor_pos ) );
                        //tline = string_count( chr(10), string_copy( text, 1, cursor_pos ) );
                        
                        /*
                        // the position of the cursor in the current line
                        cp_line = cursor_pos;
                        for(var i = 0; i &lt; line; i++)
                            cp_line -= string_length(lines[|i]) + 1;
                        
                        // make sure the cursor is on the right line...
                        line_length = string_length(lines[|line]) + line;
                        if(cp_line &gt; line_length)
                        {
                            show_debug_message(string(cp_line) + " &gt; " + string(line_length));
                            line = min( (line + 1), (ds_list_size(lines) - 1) );
                            cp_line -= line_length;
                        }
                        
                        // keep cursor in bounds of string
                        cursor_pos = clamp( cursor_pos, 0, string_length_full(display_text) - tline);
                        */
                        
                        show_debug_message("recalculating: " + string(cursor[LINE]) + " " + string(cursor[POS]) + " " + string(cursor[LOC]));
                        
                        show_debug_message("|" + string_insert("^", display_text, cursor[LOC] + 1 ) + "|" + chr(10));
                    
                    prev_cursor[LINE] = cursor[LINE];
                    prev_cursor[POS]  = cursor[POS];
                    prev_cursor[LOC]  = cursor[LOC];
                }
                
                
            //////////////
            //  DRAW CURSOR
            ////
                if(cursor_blink++ mod 30 &lt;= 15)
                {
                    var str_height = string_height("W");
                    var cx = x + string_width( string_copy( lines[|cursor[LINE]], 1, cursor[POS] ) );
                    var cy = y + str_height * cursor[LINE];
                    
                    draw_line( cx, cy, cx, (cy + str_height) );//+ min( str_height, (height - (cy - y)) )) );
                    
                    
                }
            
                
            //////////////
            //  CLEANUP
            ////
            ds_list_destroy(lines);
    }

// Draw the textbox
draw_surface( srf_text, x, y );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
