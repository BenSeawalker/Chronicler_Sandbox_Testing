<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objUIItem</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// LOCAL VARIABLES

///////////////////////////////////////////////////////
//  INHERITED
////
//double_click = true;

///////////////////////////////////////////////////////
//  DRAWING
////
srf_text = surface_create( width, height );


///////////////////////////////////////////////////////
//  CURSOR
////
cursor_pos = 0;
prev_cursor_pos = cursor_pos;

cursor_blink = 0;

cursor_line = 0;
cursor_row = 0;


text_select = false;
cursor_select_start = 0;
cursor_select_end   = 0;


///////////////////////////////////////////////////////
//  DATA
////

text = ""; // the actual typed text
prev_text = text; // the text as it was in the previous frame
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(objUIManager.selected_item == id)
{
    update_user_input(cursor_pos);
    text = user_input;
    
    target_width = string_width_full(text);
    target_height = string_height_full(text);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ACTIVATED

if(ui_event == UI_ACTIVATE)
{
    keyboard_string = "";
    user_input = text;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// LEFT CLICKED

if(ui_event == UI_LCLICK)
{
    cursor_pos = ui_textbox_calculate_cursor_loc( mouse_x, mouse_y, id );
    cursor_select_start = cursor_pos;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// LEFT HELD

if(ui_event == UI_LHOLD)
{
    cursor_select_end = ui_textbox_calculate_cursor_loc( mouse_x, mouse_y, id );
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// LEFT RELEASED

if(ui_event == UI_LRELEASE)
{
    if(cursor_select_end &lt; cursor_select_start)
    {
        var swap = cursor_select_start;
        
        cursor_select_start = cursor_select_end;
        cursor_select_end = swap;
    }
    
    var temp = string_insert("^", text, (cursor_select_start + 1) );
    temp = string_insert("^", temp, (cursor_select_end + 1) );
    show_debug_message("|" + temp + "|" + chr(10));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INHERITED
if(draw_disabled)
    exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw

///////////////////////////////////////////////////////////
//  DEBUG
////
    //draw_text(10,10,"FPS: "+string(fps));
    
    //draw border
    draw_rectangle_colour( x, y, x+width, y+height, c_red, c_red, c_red, c_red, true);


///////////////////////////////////////////////////////////
//  UPDATE
////
    // Whether or not srf_text needs to be redrawn
    var redraw = ( !surface_exists( srf_text ) ||
                   width  != prev_width ||
                   height != prev_height );
    
    
    if( (objUIManager.selected_item == id) || new || redraw)
    {
        // make sure it draws at least once
        new = false;
        
        ///////////////////////////////////////////////////////////
        //  REDRAW
        ////
            if( redraw )
            {
                prev_width  = width;
                prev_height = height;
                
                surface_free( srf_text );
                srf_text = surface_create( width, height );
            }
        
        
        ///////////////////////////////////////////////////////////
        //  TEXT
        ////
            var prev_lines = string_count(chr(10),prev_text) - string_count(chr(10),text);
            if( text != prev_text || redraw)
            {
                cursor_pos += ((string_length_full(text) - string_length_full(prev_text)) * !keyboard_check(vk_delete));
                prev_text = text;
                
                text_select = false;
                
                surface_set_target( srf_text );
                    draw_clear_alpha( c_black, 0 );
                    draw_text( 0, 0, text );
                surface_reset_target();
            }
         
           
        ///////////////////////////////////////////////////////////
        //  CURSOR
        ////
            //////////////
            //  SETUP
            ////
                // separate text into lines
                var lines = string_tokenize( text, chr(10), false );
                var num_lines = (ds_list_size(lines) - 1);
                //calculate_cursor(id);
                    
                // calculate the line the cursor is currently on
                var line = string_count( chr(10), string_copy( text, 1, cursor_pos ) );
                        
                // the position of the cursor in the current line
                var cp_line = cursor_pos;
                for(var i = 0; i &lt; line; i++)
                    cp_line -= string_length(lines[|i]) + 1;
                
                // make sure the cursor is on the right line...
                //var line_length = string_length(lines[|line]) + line;
                while(cp_line &gt; string_length(lines[|line]) + line)
                {
                    line = min( (line + 1), num_lines );
                    cp_line -= string_length(lines[|line]);
                }
                
                // keep cursor in bounds of string
                cursor_pos = clamp( cursor_pos, 0, string_length_full(text));
                
                
            //////////////
            //  KEYBOARD
            ////
                // SHIFT
                if(keyboard_check(vk_shift))
                {
                    text_select = true;
                }
            
                // Left
                if(keyboard_check_pressed(vk_left))
                {
                    cursor_pos = max(0, cursor_pos - 1);
                    
                    if(text_select)
                        text_select_start = cursor_pos;
                }
                    
                // Right
                if(keyboard_check_pressed(vk_right))
                {
                    cursor_pos = min( string_length(text), (cursor_pos + 1) );

                    if(text_select)
                        text_select_end = cursor_pos;
                }
                    
                // Up
                if(keyboard_check_pressed(vk_up))
                {
                    if(line &gt; 0)
                    {
                        // the length of the line above
                       var prev_len = string_length(lines[|line-1]);
                        
                        // move the cursor to the beginning of the line above and shift it to the correct position
                        cursor_pos -= (((cp_line + 1) + prev_len) - min( prev_len, cp_line ));
                    }
                }
                
                // Down
                if(keyboard_check_pressed(vk_down))
                {
                    if(line &lt; ds_list_size(lines) - 1)
                    {
                        var cur_len  = string_length(lines[|line]),   // the length of the current line
                            next_len = string_length(lines[|line+1]); // the length of the line below
                            
                        // move the cursor to the beginning of the line below and shift to the correct position
                        cursor_pos += ((cur_len - cp_line) + min( next_len, cp_line )) + 1;
                    }
                }
                
                // Home
                if(keyboard_check_pressed(vk_home))
                {
                    cursor_pos -= (cp_line);
                }
                
                // End
                if(keyboard_check_pressed(vk_end))
                {
                    cursor_pos += (string_length(lines[|line]) - cp_line);
                }
                
                // Backspace
                //if(keyboard_check(vk_backspace) )
                //{
                //        cursor_pos++;
                //}
                
            //////////////
            //  UPDATE CURSOR
            ////
                if(cursor_pos != prev_cursor_pos)
                {
                    // reset cursor visibility
                    cursor_blink = 0;
                    
                    
                    //////////////
                    //  RECALCULATE
                    ////
                        // the line the cursor is currently on
                        line = string_count( chr(10), string_copy( text, 1, cursor_pos ) );
                        
                        // the position of the cursor in the current line
                        cp_line = cursor_pos - line;
                        for(var i = 0; i &lt; line; i++)
                            cp_line -= string_length(lines[|i]);
                        
                        if(prev_lines == -1)
                            cp_line++;
                            
                        // make sure the cursor is on the right line...
                        //var line_length = string_length(lines[|line]) + line;
                        while(cp_line &gt; string_length(lines[|line]) + line)
                        {
                            line = min( (line + 1), num_lines );
                            cp_line -= string_length(lines[|line]);
                        }
                        
                        // keep cursor in bounds of string
                        cursor_pos = clamp( cursor_pos, 0, string_length_full(text));
                        //*/
                        
                        //show_debug_message("recalculating: " + string(line) + " " + string(cp_line) + " " + string(cursor_pos));
                    
                    prev_cursor_pos = cursor_pos;
                }
                
                
            //////////////
            //  DRAW CURSOR
            ////
                if(cursor_blink++ mod 30 &lt;= 15)
                {
                    var str_height = string_height("W");
                    var cx = x + string_width( string_copy( lines[|line], 1, cp_line ) );
                    var cy = y + str_height * line;
                    
                    draw_line( cx, cy, cx, (cy + str_height) );//+ min( str_height, (height - (cy - y)) )) );
                    
                    if(text_select)
                    {
                        
                    }
                }
            
                
            //////////////
            //  CLEANUP
            ////
            ds_list_destroy(lines);
    }


draw_surface( srf_text, x, y );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
