<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBox_old</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GLOBAL VARS
globalvar user_input;
          user_input = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LOCAL VARS

///////////////////////////////////////////////////////
//  SINGLETON
////
if(instance_number(object_index) &gt; 1)
    instance_destroy();

    
///////////////////////////////////////////////////////
//  SELECTION
////
selected_window = noone;
prev_selected_window = selected_window;

selected_item = noone;
prev_selected_item = selected_item;


///////////////////////////////////////////////////////
//  HOVER
////
hover_window = noone;
prev_hover_window = hover_window;

hover_item = noone;
prev_hover_item = hover_item;


///////////////////////////////////////////////////////
//  "PUBLIC"
////
text_wrap = true;


///////////////////////////////////////////////////////
//  "PRIVATE"
////
lclick_time = current_time;
mouse_enter_time = current_time;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TEST

//ui_scrollwindow_add(ui_create(room_width/6,room_height/6,150,200,objUIScrollWindow),ui_create(0,0,100,100,objUITextBox), 1, 1);

image_speed = 0;

colour = make_colour_hsv(0,255,128);
hue = 0;

crgb = color_normalize(colour);

chsv = RGB2HSV(crgb[r], crgb[g], crgb[b]);

show_debug_message(string(chsv[h] * 255) + " " + string(chsv[s] * 255) + " " + string(chsv[v] * 255));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("destroying");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UPDATE UI Windows

//////////////////////////////////////////////////////////////////
//  SELECTION
////
    var currently_selected = selected_window;
    
    hover_window = noone;
    
    with(objUIWindow)
    {
        // SELECT
        if(mouse_check_button_pressed(mb_left))
        {
            if(point_in_rectangle( mouse_x, mouse_y, x, y, (x + width), (y + height) ))
            {
                if(double_click &amp;&amp; !(id == currently_selected))
                {
                    if((current_time - other.lclick_time) &lt; 500)
                    {
                        other.selected_window = id;
                        break;
                    }
                }
                else
                {
                    other.selected_window = id;
                    break;
                }                    
            }
            else
            {
                other.selected_window = noone;
            }
        }
        
        // HOVER
        if(point_in_rectangle( mouse_x, mouse_y, x, y, (x + width), (y + height) ))
            hover_window = id;
    }


//////////////////////////////////////////////////////////////////
//  ACTIVATE
////

    
    if(selected_window != prev_selected_window)
    {
        // deactivate previous selected item
        ui_event_perform( UI_DEACTIVATE, prev_selected_window );
        
        // activate newly selected item
        ui_event_perform( UI_ACTIVATE, selected_window );
        
        prev_selected_window = selected_window;
    }
    else
    {
        //////////////////////////////////////////////////////////////////
        //  MOUSE
        ////
            // MOUSE ENTER
            if(hover_window != prev_hover_window)
            {
                mouse_enter_time = current_time;
                ui_event_perform( UI_MEnter, hover_window );
            }
            
            // MOUSE HOVER
            if((current_time - mouse_enter_time) &gt;= 500)
            {
                ui_event_perform( UI_MHover, hover_window );
            }
            
            
            // MOUSE LEAVE
            if(hover_window == noone &amp;&amp; prev_hover_window != noone)
            {
                ui_event_perform( UI_MLeave, prev_hover_window );
            }
        
            // HOVER UPDATE
            prev_hover_window = hover_window;
        
        
        //////////////////////////////////////////////////////////////////
        //  LEFT MOUSE BUTTON
        ////
            // CLICK
            if(mouse_check_button_pressed(mb_left))
            {
                lclick_time = current_time;
                
                ui_event_perform( UI_LCLICK, selected_window );
            }
            
            // HOLD
            if(mouse_check_button(mb_left) &amp;&amp; !mouse_check_button_pressed(mb_left))
            {
                ui_event_perform( UI_LHOLD, selected_window );
            }
            
            // RELEASE
            if(mouse_check_button_released(mb_left))
            {
                ui_event_perform( UI_LRELEASE, selected_window );
            }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UPDATE UI Items

//////////////////////////////////////////////////////////////////
//  SELECTION
////
    var currently_selected = selected_item;
    
    hover_item = noone;
    
    with(objUIItem)
    {
        var xx = x,
            yy = y;
        if(window != noone)
        {
            xx = window.x + x;//(window.x - x);
            yy = window.y + y;//(window.y - y);
        }
        
        // SELECT
        if(mouse_check_button_pressed(mb_left))
        {
            if(point_in_rectangle( mouse_x, mouse_y, xx, yy, (xx + width), (yy + height) ))
            {
                if(double_click &amp;&amp; !(id == currently_selected))
                {
                    if((current_time - other.lclick_time) &lt; 500)
                    {
                        other.selected_item = id;
                        break;
                    }
                }
                else
                {
                    other.selected_item = id;
                    break;
                }                    
            }
            else
            {
                other.selected_item = noone;
            }
        }
        
        // HOVER
        if(point_in_rectangle( mouse_x, mouse_y, xx, yy, (xx + width), (yy + height) ))
            hover_item = id;
    }


//////////////////////////////////////////////////////////////////
//  ACTIVATE
////

    
    if(selected_item != prev_selected_item)
    {
        // deactivate previous selected item
        ui_event_perform( UI_DEACTIVATE, prev_selected_item );
        
        show_debug_message(string(selected_item));
        // activate newly selected item
        ui_event_perform( UI_ACTIVATE, selected_item );
        
            
        prev_selected_item = selected_item;
        
        exit; // only perform activate/deactivate function this step
    }

    
//////////////////////////////////////////////////////////////////
//  MOUSE MOVEMENT
////
    // MOUSE ENTER
    if(hover_item != prev_hover_item)
    {
        mouse_enter_time = current_time;
        ui_event_perform( UI_MEnter, hover_item );
    }
    
    // MOUSE HOVER
    if((current_time - mouse_enter_time) &gt;= 500)
    {
        ui_event_perform( UI_MHover, hover_item );
    }
    
    
    // MOUSE LEAVE
    if(hover_item == noone &amp;&amp; prev_hover_item != noone)
    {
        ui_event_perform( UI_MLeave, prev_hover_item );
    }

    // HOVER UPDATE
    prev_hover_item = hover_item;


//////////////////////////////////////////////////////////////////
//  MOUSE PRESSED
////
    ////////////
    //  LEFT
    ////
        // LEFT CLICK
        if(mouse_check_button_pressed(mb_left))
        {
            lclick_time = current_time;
            
            ui_event_perform( UI_LCLICK, selected_item );
        }
        
        // LEFT HOLD
        if(mouse_check_button(mb_left) &amp;&amp; !mouse_check_button_pressed(mb_left))
        {
            ui_event_perform( UI_LHOLD, selected_item );
        }
        
        // LEFT RELEASE
        if(mouse_check_button_released(mb_left))
        {
            ui_event_perform( UI_LRELEASE, selected_item );
        }
        
        
    ////////////
    //  RIGHT
    ////
        // RIGHT CLICK
        if(mouse_check_button_pressed(mb_right))
        {
            ui_event_perform( UI_RCLICK, selected_item );
        }
        
        // RIGHT HOLD
        if(mouse_check_button(mb_right) &amp;&amp; !mouse_check_button_pressed(mb_right))
        {
            ui_event_perform( UI_RHOLD, selected_item );
        }
        
        // RIGHT RELEASE
        if(mouse_check_button_released(mb_right))
        {
            ui_event_perform( UI_RRELEASE, selected_item );
        }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>update_user_input();
draw_text_ext(x,y,user_input,string_height("W")+3,200);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _colorToMatch = shader_get_uniform(shdColorDrain, "f_ColorToMatch");
    _vary         = shader_get_uniform(shdColorDrain, "f_Vary");
    
var _saturation = shader_get_uniform(shdColorize, "f_Saturation");
    _toColour   = shader_get_uniform(shdColorize, "f_ToColour");
    //_offset     = shader_get_uniform(sdrColorize, "f_Offset");
    
hue += 0.5;
colour = color_normalize(make_colour_hsv(hue mod 255,255,128));

//var srf = surface_create( sprite_get_width(spr_flower), sprite_get_height(spr_flower) );
var sat = 1;
var c1 = color_normalize(c_red);

//surface_set_target(srf);    
    shader_set(shdColorDrain);
        shader_set_uniform_f( _colorToMatch, c1[0],c1[1],c1[2] );
        shader_set_uniform_f( _vary, 150/255 );
        draw_sprite( spr_flower, 0, 0, 0);
    shader_reset();
//surface_reset_target();




//shader_set(shdColorize);
//    shader_set_uniform_f(_saturation, sat,sat,sat );
//    shader_set_uniform_f(_toColour, colour[0], colour[1], colour[2] );
    //draw_surface(srf,0,0);
//shader_reset();
    
//surface_free(srf);

draw_sprite( spr_flower, 0, 0, sprite_get_height(spr_flower));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
var srf = surface_create(255, 15);
surface_set_target(srf);
draw_roundrect_grad( 0, 0, 200, 100, c_white, c_gray, 10, 1.2 );
surface_reset_target();
//*/

var _saturation = shader_get_uniform(shdColorize, "f_Saturation");
    _toColour   = shader_get_uniform(shdColorize, "f_ToColour");
    //_offset     = shader_get_uniform(sdrColorize, "f_Offset");
    
colour = color_normalize(make_colour_hsv(hue++ mod 255,255,128));

var sat = 10;
shader_set(shdColorize);
    shader_set_uniform_f(_saturation, sat,sat,sat );
    shader_set_uniform_f(_toColour, colour[0], colour[1], colour[2] );
    //shader_set_uniform_f(_offset, sin(hue)*1 );
    //draw_surface(srf, 10, 10);
    draw_sprite_stretched( sprBox, 0, 10, 10, 100, 50 );
shader_reset();

//surface_free(srf);
//*/

//draw_roundrect_grad( 10, 10, 210, 110, colour, c_dkgray, 10, 2 );

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
